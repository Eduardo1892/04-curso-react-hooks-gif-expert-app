{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categorias","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cAAkB,EAEPC,mBAAS,IAFF,mBAEpCC,EAFoC,KAExBC,EAFwB,KAwB/C,OACI,sBAAMC,SAjBe,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAACS,GACX,MAAM,CACFP,GADJ,mBAEOO,OAIXN,EAAc,MAMtB,SACI,uBACIO,KAAK,OACLC,MAAST,EACTU,SAzBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAIbC,EAJa,iDAIoCC,UAAUH,GAJ9C,+DAKAI,MAAMF,GALN,cAKbG,EALa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAeZM,GAfY,4CAAH,sDCAPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIrC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCJJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAc,IAAD,EAEbd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAgBvC,OATAC,qBAAU,WAENxB,EAAQC,GAAUwB,MAAK,SAAAd,GAAG,OAAIY,EAAS,CACnCf,KAAMG,EACNU,SAAS,SAGd,CAACpB,IAEGqB,EDZwBI,CAAczB,GAAjCa,EAFyB,EAE9BN,KAAaa,EAFiB,EAEjBA,QAGpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IACjDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACb,qBAAKA,UAAU,YAAf,SACKH,EAAOJ,KAAI,SAAAC,GACZ,OAAO,cAAC,EAAD,eAEKA,GADEA,EAAIC,aEbrBe,EAAe,WAAM,MAGMxC,mBAAS,CAAC,gBAHhB,mBAGvByC,EAHuB,KAGX1C,EAHW,KAK9B,OACI,qCACI,8CACA,cAAC,EAAD,CACIA,cAAgBA,IAEpB,uBAEA,6BAEQ0C,EAAWlB,KAAI,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEGA,SAAWA,GADLA,Y,MCd9B4B,IAASC,OACL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.5ec2d56d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport propTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) =>{\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        if(inputValue.trim().length > 2){\n            setCategories((categorias) => {\n                return[\n                    inputValue,\n                    ...categorias,\n                    \n                ]\n            })\n            setInputValue('')\n        }\n    }\n\n\nreturn (\n    <form onSubmit={handleSubmit}>\n        <input\n            type=\"text\"\n            value = {inputValue}\n            onChange={ handleInputChange}\n        />\n    </form>\n)\n\n}\n\nAddCategory.propTypes = {\n    setCategories: propTypes.func.isRequired\n}","\n\nexport const getGifs = async( category ) =>{\n\n    //api.giphy.com/v1/gifs/search\t\n    //J7XxXL6TP9JYEKJYRaV55MMW7cpw1DcH\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=J7XxXL6TP9JYEKJYRaV55MMW7cpw1DcH`\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs\n}","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n\n   /*  console.log(id, title, url) */\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title }/>\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { getGifs } from '../helpers/getGifs'\nimport { GifGridItem } from './GifGridItem'\n\nexport const GifGrid = ({ category }) => {\n\n    const {data:images, loading} = useFetchGifs( category );\n\n    \n    return (\n        <>\n            <h3 className=\"animate__animated animate__bounce\">{category}</h3>\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n            <div className=\"card-grid\">\n                {images.map(img => {\n                return <GifGridItem \n                        key={ img.id }\n                        {...img}\n                    />\n                })}\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = ( category ) =>{\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {\n\n        getGifs(category).then(img => setstate({\n            data: img,\n            loading: false,\n        }))\n\n    }, [category])\n\n    return state\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\n    const [categories, setCategories] = useState(['Dragon Ball'])\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory\n                setCategories= {setCategories}\n            />\n            <hr />\n\n            <ol>\n                {\n                    categories.map(category => (\n                     <GifGrid  \n                        key={ category }\n                        category={ category }/>\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}